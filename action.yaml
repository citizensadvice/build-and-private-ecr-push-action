name: 'Build and push to a private ECR'
description: 'Build and push a Docker image to a private ERC, written for CA repositories.'
inputs:
  role_arn:
    description: 'A role to assume with permission to push to the Private ECR repository'
    required: false
    default: 'arn:aws:iam::979633842206:role/PrivateECRPush'
  dockerfile_context:
    description: 'The context of the Dockerfile. Defaults to root of project.'
    required: false
    default: '.'
  dockerfile:
    description: 'The name of the dockerfile to build. Defaults to Dockerfile'
    required: false
    default: 'Dockerfile'
  repository_name:
    description: 'The name of the ECR repository. Will be used as the name of the Docker image'
    required: true
  auth_token:
    description: 'A token to pull the repository. Usually GITHUB_TOKEN'
    required: true
  multiarch_build:
    description: 'Build a `linux/arm64` image as well as `linux/amd64`. Defaults to enabled'
    required: false
    default: 'disabled'
  push_after_build:
    description: 'Push the image after building it. Useful if you need to run tests on the image before you push it. Defaults to `true`'
    required: false
    default: true
  tag_dev:
    description: 'Tag the image as a development image'
    required: false
    default: false
  tag_latest:
    description: 'Tag the image with latest'
    required: false
    default: 'true'

outputs:
  image_id:
    description: 'ID of the image'
    value: ${{ steps.build_and_push.outputs.imageid }}
  image_digest:
    description: 'Digest of the image'
    value: ${{ steps.build_and_push.digest }}
  image_tags:
    description: 'A CSV list of the image tags'
    value: ${{ github.sha }},${{ steps.branch-name.outputs.name }},latest

runs:
  using: 'composite'
  steps:
    - name: Configure Multi-arch Build
      id: multiarch
      shell: bash
      run: |
        if [[ "${{ inputs.multiarch_build }}" == "enabled" ]] ; then
          echo "multiarch=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.multiarch_build }}" == "disabled" ]] ; then
          echo "multiarch=linux/amd64" >> $GITHUB_OUTPUT
        else
          echo "Input `multiarch_build` not set correctly. Options are 'enabled' or 'disabled'"
          exit 1
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ inputs.role_arn }}
        role-session-name: ${{ inputs.repository_name }}-actions-workflow
        aws-region: eu-west-1

    - name: ECR login
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private

    - name: Get branch name
      id: branch-name
      shell: bash
      run: |
        branch=${{ github.head_ref || github.ref_name }}
        echo "name=${branch//\//-}" >> $GITHUB_OUTPUT

    - name: Configure latest tag
      id: latest-tag
      shell: bash
      run: |
        if [[ "${{ inputs.tag_latest }}" == "true" ]] ; then
          echo "tag=${{ steps.ecr-login.outputs.registry }}/${{ inputs.repository_name }}:latest" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.tag_latest }}" == "false" ]] ; then
          echo "tag=" >> $GITHUB_OUTPUT
        else
          echo "Input `tag_latest` not set correctly. Options are 'true' or 'false'"
          exit 1
        fi

    - name: Configure dev tag
      id: dev-tag
      shell: bash
      run: |
        if [[ "${{ inputs.tag_dev }}" == "true" ]] ; then
          echo "tag=dev_" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.tag_dev }}" == "false" ]] ; then
          echo "tag=" >> $GITHUB_OUTPUT
        else
          echo "Input `dev_tag` not set correctly. Options are 'true' or 'false'"
          exit 1
        fi

    - uses: actions/checkout@v3
      with:
        token: ${{ inputs.auth_token }}
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2.4.0
      with:
        platforms: ${{ steps.multiarch.outputs.multiarch }}

    - name: Check if image already exists
      shell: bash
      run: |
        if [[ $(aws ecr describe-images --region eu-west-1 --repository-name ${{ inputs.repository_name }} --image-ids=imageTag=${{ github.sha }}) ]]
        then
          echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      if: env.IMAGE_EXISTS == 'false'
      id: build_and_push
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push_after_build }}
        load: false
        # Cache is experimental, see https://github.com/moby/buildkit#github-actions-cache-experimental
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ steps.multiarch.outputs.multiarch }}
        tags: |
          ${{ steps.ecr-login.outputs.registry }}/${{ inputs.repository_name }}:${{ steps.dev-tag.outputs.tag }}${{ github.sha }}
          ${{ steps.ecr-login.outputs.registry }}/${{ inputs.repository_name }}:${{ steps.branch-name.outputs.name }}
          ${{ steps.ecr-login.outputs.registry }}/${{ inputs.repository_name }}:latest
          ${{ steps.tag_latest.outputs.tag }}
